---
description: how to write typescript code
globs: 
alwaysApply: false
---
---
description: how to write typescript code
globs: **/*.ts
---
# Typescript Code Style Rules

When writing code, you MUST follow these rules:
- USE TDD and write tests for all code.
- Follow best practices of NestJS, Clean Code, and lean towards agile methodologies.
- Prioritize modularity, DRY, performance, and security.
- Use the latest versions of libraries and tools.
- Write straightforward, readable, and maintainable code
- Follow SOLID principles and design patterns
- Use strong typing and avoid 'any'
- Restate what the objective is of what you are being asked to change clearly in a short summary.

## Naming Conventions

- Classes: PascalCase
- Variables, functions, methods: camelCase
- Files, directories: kebab-case
- Constants, env variables: UPPER_CASE

## Functions

- Use descriptive names: verbs & nouns (e.g., getUserData)
- Prefer arrow functions for simple operations
- Use default parameters and object destructuring
- Document with JSDoc
- Avoid nesting functions more than 2 levels deep.

## Error Handling
   - Use `try/catch` with typed errors
   - Log errors with context
   - Throw custom error classes

## File Structure
   - One class/interface per file
   - PascalCase for types/interfaces
   - camelCase for variables/functions
   - kebab-case for file name

## Formatting
   - Always run Prettier before saving
   - Prettier must be configured as ESLint plugin to prevent rule collisions
   - Use 2 spaces for indentation
   - Max line length: 120 characters
   - Single quotes for strings
   - Trailing commas in multi-line objects/arrays
   - Semicolons never
   - EOF new line

## TypeScript
   - No explicit `any` types
   - Always type function returns
   - Use `interface` over `type` for objects
   - Enforce readonly for immutable data
   - Prefer `const` over `let`

## Types and Interfaces

- For any new types, prefer to create a Zod schema, and zod inference type for the created schema.
- Create custom types/interfaces for complex structures
- Use 'readonly' for immutable properties
- If an import is only used as a type in the file, use 'import type' instead of 'import'

## Comments

- When writing JSDocs, only use TypeDoc compatible tags.
- Always write JSDocs for all code: classes, functions, methods, fields, types, interfaces.

## Specific to NestJS

### Basic Principles

- Use modular architecture
- Encapsulate the API in modules.
  - One module per main domain/route.
  - One controller for its route.
  - And other controllers for secondary routes.
  - A models folder with data types.
  - DTOs validated with class-validator for inputs.
  - Declare simple types for outputs.
  - A services module with business logic and persistence.
  - Entities with MikroORM for data persistence.
  - One service per entity.
- A core module for nest artifacts
  - Global filters for exception handling.
  - Global middlewares for request management.
  - Guards for permission management.
  - Interceptors for request management.
- A shared module for services shared between modules.
  - Utilities
  - Shared business logic

### Testing

- Use the standard Jest framework for testing.
- Write tests for each controller and service.
- Write end to end tests for each api module.